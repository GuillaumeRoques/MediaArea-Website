{% extends 'AppBundle::base.html.twig' %}

{% block title %}MediaInfo - Duplication of streams{% endblock %}
{% block description %}{% trans %}about.page.description{% endtrans %}{% endblock %}
{% block keywords %}{% trans %}about.page.keywords{% endtrans %}{% endblock %}

{% block body %}
<h1>Duplication of streams</h1>

<ul>
 <li><a href="#Introduction">Introduction</a></li>
 <li><a href="#Steps">Steps</a>
  <ul>
   <li><a href="#Duplicate_Init">Initialization</a></li>
   <li><a href="#Duplicate_Continue">Parsing data</a></li>
  </ul>
 </li>
 <li><a href="#Examples">Examples</a>
  <ul>
   <li><a href="#Examples_1">Basic example</a></li>
   <li><a href="#Examples_2">If we want streaming output only when MediaInfo has detected the streams</a></li>
  </ul>
 </li>
</ul>

<a name="Introduction"></a><h2>Introduction</h2>
MediaInfo has a specific feature, which permit to duplicate streams from a stream having multiple substreams.<br/>
You can modify the count of Vidoeo/Audio/Text stream for each programs in a stream.<br/>
Currently, this feature is supported with the following parsers:
<ul>
    <li>MPEP-TS (MPEG Transport Stream)</li>
</ul>

<a name="Steps"></a><h2>Steps</h2>
<a name="Duplicate_Init"></a><h3>Initialization</h3>
<code>MediaInfo::Options("File_Duplicate", ***A string with parameters***)</code><br/>
<br/>
The 2nd string is a list of parameters, with the form: <code>Parameter1;Parameter2;...</code><br/>
List of available parameters:
<ul>
    <li><code>file://***the file name for the destination***"</code>. Specify the file name for the duplicated stream.<br/>
         Note: There is nothing more to do: the file will be filled during the parsing</li>
    <li><code>memory://***the memory pointer for the destination***"</code>. Specify the memory pointer for the duplicated stream (to a buffer).<br/>
         Note: The format of the memory pointer is <code>memory://pointer:size</code>, with pointer and size in Decimal format. "size" is the size of the allocated data pointed by the pointer.</li>
    <li><code>program_number=***the program number value***"</code>. Specify which program number should be duplicated (this value is in Decimal format).<br/>
         By default, all streams from this program number are duplicated</li>
    <li><code>program_map_PID=***the program_map_PID value***"</code>. Specify which program_map_PID should be duplicated (this value is in Decimal format).<br/>
         By default, all streams from this program_map_PID are duplicated</li>
    <li><code>elementary_PID=***the elementary_PID value***"</code>. Specify which elementary_PID should be duplicated (this value is in Decimal format).<br/>
         By default, all streams from a program_number or a program_map_PID are duplicated, specifying at least one elementary_PID will disable the other streams duplication</li>
</ul>

<a name="Duplicate_Continue"><h3></a>Parsing data</h3>
If you use a memomry pointer, you must retrieve the count of written bytes during the parsing. The method is:<br/>
<code>MediaInfo::Output_Buffer_Get()</code><br/>

<a name="Examples"></a><h2>Examples</h2>
<a name="Examples_1"></a><h3>Basic example</h3>
The user has configured 1 memory buffer for input
<ul>
    <li>a memory pointer 1111111111, with 1316 reserved bytes</li>
</ul>
The user has configured 1 memory buffer for output:
<ul>
    <li>a memory pointer 1234567890, with 1316 reserved bytes</li>
</ul>
The streams has multiple programs, one of these program is named "1".<br/>
The user wants to have this program, and only this one, in the output.<br/>
<br/>
<code>//Registering for duplication<br/>
MI.Option(_T("File_Duplicate"), _T("memory://1234567890:1316;program_number=1"));<br/>
<br/>
//Setting MediaInfo as parsing a non seakable file, because we want the complete stream<br/>
MI.Option(_T("File_IsSeekable"), _T("0"));<br/>
<br/>
//Preparing to fill MediaInfo with a buffer<br/>
MI.Open_Buffer_Init();<br/>
<br/>
//The parsing loop<br/>
size_t From_Buffer_Size;<br/>
do<br/>
{<br/>
    //Reading data somewhere, do what you want for this.<br/>
    From_Buffer_Size=From.Read(From_Buffer, 1316); //From is a object able to read data (a file, a socket, what you want)<br/>
<br/>
    //Sending the buffer to MediaInfo<br/>
    if ((MI.Open_Buffer_Continue(From_Buffer, From_Buffer_Size)&0x1)==0 && !CanWrite_OnlyIfParsingIsOk)<br/>
<br/>
    //Retrieving data written in memory<br/>
    size_t To_Buffer_Size=MI.Output_Buffer_Get(_T("memory://1234567890:1316"));<br/>
<br/>
    //Writing data to somewhere, do what you want for this.<br/>
    To.Write(To_Buffer, To_Buffer_Size);<br/>
}<br/>
while (From_Buffer_Size>0);</code>

<a name="Examples_2"></a><h3>If we want streaming output only when MediaInfo has detected the streams</h3>
The user has configured 1 memory buffer for input
<ul>
    <li>a memory pointer 1111111111, with 1316 reserved bytes</li>
</ul>
The user has configured 2 memory buffer for output:
<ul>
    <li>a memory pointer 1234567890, with 1316 reserved bytes</li>
    <li>a memory pointer 0987654321, with 1316 reserved bytes</li>
</ul>
The streams has multiple programs, and program "1" with:
<ul>
    <li>1 Video stream, named "1000"</li>
    <li>1 Audio stream, named "1001"</li>
    <li>1 Audio stream, named "1002"</li>
</ul>
The user wants to have:
<ul>
    <li>Video 1000 + Audio 1001 in one output</li>
    <li>Video 1000 + Audio 1002 in one output</li>
</ul>
The user want to fill output only when the stream information has been completed.<br/>
<br/>
<code>//Registering for duplication<br/>
MI.Option(_T("File_Duplicate"), _T("memory://1234567890:1316;program_number=1;elementary_PID=1000;elementary_PID=1001"));<br/>
MI.Option(_T("File_Duplicate"), _T("memory://0987654321:1316;program_number=1;elementary_PID=1000;elementary_PID=1002"));<br/>
<br/>
//Setting MediaInfo as parsing a non seakable file, because we want the complete stream<br/>
MI.Option(_T("File_IsSeekable"), _T("0"));<br/>
<br/>
//Preparing to fill MediaInfo with a buffer<br/>
MI.Open_Buffer_Init();<br/>
<br/>
//The parsing loop<br/>
bool CanWrite_OnlyIfParsingIsOk=false;<br/>
size_t From_Buffer_Size;<br/>
do<br/>
{<br/>
    //Reading data somewhere, do what you want for this.<br/>
    From_Buffer_Size=From.Read(From_Buffer, 1316); //From is a object able to read data (a file, a socket, what you want)<br/>
<br/>
    //Sending the buffer to MediaInfo<br/>
    if ((MI.Open_Buffer_Continue(From_Buffer, From_Buffer_Size)&0x1)==0 && !CanWrite_OnlyIfParsingIsOk)<br/>
        CanWrite_OnlyIfParsingIsOk=true;<br/>
<br/>
    if (CanWrite_OnlyIfParsingIsOk)<br/>
    {<br/>
        //Retrieving data written in memory<br/>
        size_t To_Buffer_Size_1=MI.Output_Buffer_Get(_T("memory://1234567890:1316"));<br/>
        size_t To_Buffer_Size_2=MI.Output_Buffer_Get(_T("memory://0987654321:1316"));<br/>
<br/>
        //Writing data to somewhere, do what you want for this.<br/>
        To_1.Write(To_Buffer_1, To_Buffer_Size_1);<br/>
        To_2.Write(To_Buffer_2, To_Buffer_Size_2);<br/>
    }<br/>
}<br/>
while (From_Buffer_Size>0);</code>
{% endblock %}
